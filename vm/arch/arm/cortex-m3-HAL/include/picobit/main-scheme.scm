;;File: main-scheme.scm - function in scheme
;;Cecilia Carneiro e Silva

;;SLEEP, enable-disable
;;sleep
(define (sleep time)
  (#%sleep time))
;;enable
(define disable 0)
(define enable  1)

;;RCC - Reset and Clock Control
(define (GPIOA_clock)
  ;;RCC_APB2Periph_GPIOA             ((uint32_t)0x00000004)
  (let ( (APB_H 0)
         (APB_L #x4)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (GPIOB_clock)
  ;;RCC_APB2Periph_GPIOB             ((uint32_t)0x00000008)
  (let ( (APB_H 0)
         (APB_L #x8)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (GPIOC_clock)
  ;;RCC_APB2Periph_GPIOC             ((uint32_t)0x00000010)
  (let ( (APB_H 0)
         (APB_L #x10)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (GPIOD_clock)
  ;;RCC_APB2Periph_GPIOD             ((uint32_t)0x00000020)
  (let ( (APB_H 0)
         (APB_L #x20)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (GPIOE_clock)
  ;;RCC_APB2Periph_GPIOE             ((uint32_t)0x00000040)
  (let ( (APB_H 0)
         (APB_L #x40)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (ADC1_clock)
  ;;RCC_APB2Periph_ADC1              ((uint32_t)0x00000200)
  (let ( (APB_H 0)
         (APB_L #x200)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (DMA1_clock)
  ;;RCC_AHBPeriph_DMA1               ((uint32_t)0x00000001)
  (let ( (APB_H 0)
         (APB_L #x1)
         (APB?  0) )
    (clock_enable APB_H APB_L APB?) ))
(define (DMA2_clock)
  ;;RCC_AHBPeriph_DMA2               ((uint32_t)0x00000002)
  (let ( (APB_H 0)
         (APB_L #x2)
         (APB?  0) )
    (clock_enable APB_H APB_L APB?) ))
(define (TIM2_clock)
  ;;RCC_APB1Periph_TIM2              ((uint32_t)0x00000001)
  (let ( (APB_H 0)
         (APB_L #x1)
         (APB?  1) )
    (clock_enable APB_H APB_L APB?) ))
(define (TIM3_clock)
  ;;RCC_APB1Periph_TIM3              ((uint32_t)0x00000002)
  (let ( (APB_H 0)
         (APB_L #x2)
         (APB?  1) )
    (clock_enable APB_H APB_L APB?) ))
(define (TIM4_clock)
  ;;RCC_APB1Periph_TIM4              ((uint32_t)0x00000004)
  (let ( (APB_H 0)
         (APB_L #x4)
         (APB?  1) )
    (clock_enable APB_H APB_L APB?) ))
(define (TIM5_clock)
  ;;RCC_APB1Periph_TIM5              ((uint32_t)0x00000008)
  (let ( (APB_H 0)
         (APB_L #x8)
         (APB?  1) )
    (clock_enable APB_H APB_L APB?) ))
(define (AFIO_clock)
  ;;#RCC_APB2Periph_AFIO              ((uint32_t)0x00000001)
  (let ( (APB_H 0)
         (APB_L #x1)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (DAC_clock)
  ;;RCC_APB1Periph_DAC               ((uint32_t)0x20000000)
  (let ( (APB_H #x2000)
         (APB_L #x0000)
         (APB?  1) )
    (clock_enable APB_H APB_L APB?) ))
(define (USART1_clock)
  ;;RCC_APB2Periph_USART1            ((uint32_t)0x00004000)
  (let ( (APB_H #x0000)
         (APB_L #x4000)
         (APB?  2) )
    (clock_enable APB_H APB_L APB?) ))
(define (USART2_clock)
  ;;RCC_APB1Periph_USART2            ((uint32_t)0x00020000)
  (let ( (APB_H #x0002)
         (APB_L #x0000)
         (APB?  1) )
    (clock_enable APB_H APB_L APB?) ))
(define (USART3_clock)
  ;;RCC_APB1Periph_USART3            ((uint32_t)0x00040000)
  (let ( (APB_H #x0004)
         (APB_L #x0000)
         (APB?  1) )
    (clock_enable APB_H APB_L APB?) ))


;;GPIO - defines
;;GPIOs
(define GPIOA 0)
(define GPIOB 1)
(define GPIOC 2)
(define GPIOD 3)
(define GPIOE 4)
;;Direction
(define DIR_output 'Output)
(define DIR_input  'Input)
(define DIR_af     'Alternative-function)
;;Mode
(define MODE_pp        'Push-pull)
(define MODE_od        'Open-drain)
(define MODE_analog    'Analog)
(define MODE_floating  'Floation)
(define MODE_pull-down 'Pull-down)
(define MODE_pull-up   'Pull-up)
;;Speed
(define SPEED_2  1)
(define SPEED_10 1)
(define SPEED_50 1)
(define SPEED_in 0)
;;Pin
(define Pin_0           #x0001)
(define Pin_1           #x0002)
(define Pin_2           #x0004)
(define Pin_3           #x0008)
(define Pin_4           #x0010)
(define Pin_5           #x0020)
(define Pin_6           #x0040)
(define Pin_7           #x0080)
(define Pin_8           #x0100)
(define Pin_9           #x0200)
(define Pin_10          #x0400)
(define Pin_11          #x0800)
(define Pin_12          #x1000)
(define Pin_13          #x2000)
(define Pin_14          #x4000)
(define Pin_15          #x8000)
(define Pin_All         #xFFFF)
;;configure mode_direction
(define GPIO_Mode_AIN         #x0)
(define GPIO_Mode_IN_FLOATING #x04)
(define GPIO_Mode_IPD         #x28)
(define GPIO_Mode_IPU         #x48)
(define GPIO_Mode_Out_OD      #x14)
(define GPIO_Mode_Out_PP      #x10)
(define GPIO_Mode_AF_OD       #x1C)
(define GPIO_Mode_AF_PP       #x18)

;;Configure GPIO
(define (GPIO_init GPIOx direction mode speed pin)
  ;;enable clock
  (cond [(equal? GPIOx GPIOA)
         (GPIOA_clock)]
        [(equal? GPIOx GPIOB)
         (GPIOB_clock)]
        [(equal? GPIOx GPIOC)
         (GPIOC_clock)]
        [(equal? GPIOx GPIOD)
         (GPIOD_clock)]
        [(equal? GPIOx GPIOE)
         (GPIOE_clock)])
  ;;configure
  (cond [(equal? direction DIR_output)
         (if (equal? mode MODE_pp)
             (GPIO_config GPIOx GPIO_Mode_Out_PP pin speed)
             (GPIO_config GPIOx GPIO_Mode_Out_OD pin speed))]

        [(equal? direction DIR_af)
         (if (equal? mode MODE_pp)
             (GPIO_config GPIOx GPIO_Mode_AF_PP pin speed)
             (GPIO_config GPIOx GPIO_Mode_AF_OD pin speed))]

        [(equal? direction DIR_input)
         (cond [(equal? mode MODE_analog)
                (GPIO_config GPIOx GPIO_Mode_AIN pin speed)]
               [(equal? mode MODE_floating)
                (GPIO_config GPIOx GPIO_Mode_IN_FLOATING pin speed)]
               [(equal? mode MODE_pull-down)
                (GPIO_config GPIOx GPIO_Mode_IPD pin speed)]
               [(equal? mode MODE_pull-up)
                (GPIO_config GPIOx GPIO_Mode_IPU pin speed)] )]) )

;;IO_read and IO_write
(define (IO_read gpiox pin)
  (#%IO_read gpiox pin))
(define (IO_write gpiox pin value)
  (#%IO_write gpiox pin value))

;;Set-led, gpioC, pin8 and pin9
(define (led! pin)
  (GPIO_init GPIOC 'Output 'Push-pull SPEED_50 pin)
  ;;#f or #t
  (lambda(value)
    (IO_write GPIOC pin value)) )
;;Button-user, botao da placa
(define (BUTTON-user)
  (GPIO_init GPIOA 'Input  'Pull-down SPEED_in Pin_0)
  (lambda ()
    (IO_read GPIOA Pin_0)) )
;;IO_output
(define (IO_output gpiox pin uart?)
  (GPIO_init gpiox 'Output 'Push-pull SPEED_50 pin)
  (if uart? (UART_GPIO 'write gpiox pin p_OUT) "")
  (lambda (value)
    (IO_write gpiox pin value)) )
;;IO_input
(define (IO_input gpiox pin uart?)
  (GPIO_init gpiox 'Input  'Pull-down SPEED_in pin)
  (if uart? (UART_GPIO 'read gpiox pin p_IN) "")
  (lambda ()
    (IO_read gpiox pin)) )
;;AD_input
(define (AD_input gpiox pin)
  (GPIO_init gpiox 'Input 'Analog SPEED_in pin) )
;;PWM_ouput
(define (PWM_output gpiox pin)
  (GPIO_init gpiox 'Alternative-function 'Push-pull SPEED_50 pin) )

(define (GPIO_PartialRemap1_TIM2)
  ;;((uint32_t)0x00180100)
  (let ( (afio_H #x0018)
         (afio_L #x0100) )
    (AFIO_remap afio_H afio_L) ))
(define (GPIO_PartialRemap2_TIM2)
  ;;((uint32_t)0x00180200)
  (let ( (afio_H #x0018)
         (afio_L #x0200) )
    (AFIO_remap afio_H afio_L) ))
(define (GPIO_FullRemap_TIM2)
  ;;((uint32_t)0x00180300)
  (let ( (afio_H #x0018)
         (afio_L #x0300) )
    (AFIO_remap afio_H afio_L) ))
(define (GPIO_PartialRemap_TIM3)
  ;;((uint32_t)0x001A0800)
  (let ( (afio_H #x001a)
         (afio_L #x0800) )
    (AFIO_remap afio_H afio_L) ))
(define (GPIO_FullRemap_TIM3)
  ;;((uint32_t)0x001A0C00)
  (let ( (afio_H #x001a)
         (afio_L #x0c00) )
    (AFIO_remap afio_H afio_L) ))
(define (GPIO_Remap_TIM4)
  ;;((uint32_t)0x00001000)
  (let ( (afio_H #x0000)
         (afio_L #x1000) )
    (AFIO_remap afio_H afio_L) ))


;;ADC
;;ADC-defines
;;ADC-modes (uint32_t)
;;Cuidado, programa em C sem shift to right
(define ADC_Mode_Independent                       (arithmetic-shift-right #x00000000 12))
(define ADC_Mode_RegInjecSimult                    (arithmetic-shift-right #x00010000 12))
(define ADC_Mode_RegSimult_AlterTrig               (arithmetic-shift-right #x00020000 12))
(define ADC_Mode_InjecSimult_FastInterl            (arithmetic-shift-right #x00030000 12))
(define ADC_Mode_InjecSimult_SlowInterl            (arithmetic-shift-right #x00040000 12))
(define ADC_Mode_InjecSimult                       (arithmetic-shift-right #x00050000 12))
(define ADC_Mode_RegSimult                         (arithmetic-shift-right #x00060000 12))
(define ADC_Mode_FastInterl                        (arithmetic-shift-right #x00070000 12))
(define ADC_Mode_SlowInterl                        (arithmetic-shift-right #x00080000 12))
(define ADC_Mode_AlterTrig                         (arithmetic-shift-right #x00090000 12))

;;ADC-trigger (only ADC1) (uint32_t)
(define ADC_ExternalTrigConv_T1_CC1                (arithmetic-shift-right #x00000000 12))
(define ADC_ExternalTrigConv_T1_CC2                (arithmetic-shift-right #x00020000 12))
(define ADC_ExternalTrigConv_T2_CC2                (arithmetic-shift-right #x00060000 12))
(define ADC_ExternalTrigConv_T3_TRGO               (arithmetic-shift-right #x00080000 12))
(define ADC_ExternalTrigConv_T4_CC4                (arithmetic-shift-right #x000A0000 12))
(define ADC_ExternalTrigConv_Ext_IT11_TIM8_TRGO    (arithmetic-shift-right #x000C0000 12))
(define ADC_ExternalTrigConv_T1_CC3                (arithmetic-shift-right #x00040000 12))
(define ADC_ExternalTrigConv_None                  (arithmetic-shift-right #x000E0000 12))

;;ADC-dataAlign (uint32_t)
(define ADC_DataAlign_Right                        #x00000000)
(define ADC_DataAlign_Left                         #x00000800)

;;ADC-Channel (uint8_t)
(define ADC_Channel_0                               #x00)
(define ADC_Channel_1                               #x01)
(define ADC_Channel_2                               #x02)
(define ADC_Channel_3                               #x03)
(define ADC_Channel_4                               #x04)
(define ADC_Channel_5                               #x05)
(define ADC_Channel_6                               #x06)
(define ADC_Channel_7                               #x07)
(define ADC_Channel_8                               #x08)
(define ADC_Channel_9                               #x09)
(define ADC_Channel_10                              #x0A)
(define ADC_Channel_11                              #x0B)
(define ADC_Channel_12                              #x0C)
(define ADC_Channel_13                              #x0D)
(define ADC_Channel_14                              #x0E)
(define ADC_Channel_15                              #x0F)
(define ADC_Channel_16                              #x10)
(define ADC_Channel_17                              #x11)

;;ADC-tempSensor (uint8_t)
(define ADC_Channel_TempSensor                      ADC_Channel_16)
(define ADC_Channel_Vrefint                         ADC_Channel_17)

;;ADC-Channels config
;;ADC-sampleTime (uint8_t)
(define ADC_SampleTime_1Cycles5                    #x00)
(define ADC_SampleTime_7Cycles5                    #x01)
(define ADC_SampleTime_13Cycles5                   #x02)
(define ADC_SampleTime_28Cycles5                   #x03)
(define ADC_SampleTime_41Cycles5                   #x04)
(define ADC_SampleTime_55Cycles5                   #x05)
(define ADC_SampleTime_71Cycles5                   #x06)
(define ADC_SampleTime_239Cycles5                  #x07)

;;ADC-externalTrig (uint32_t)
(define ADC_ExternalTrigInjecConv_T2_TRGO           #x00002000)
(define ADC_ExternalTrigInjecConv_T2_CC1            #x00003000)
(define ADC_ExternalTrigInjecConv_T3_CC4            #x00004000)
(define ADC_ExternalTrigInjecConv_T4_TRGO           #x00005000)
(define ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4 #x00006000)
(define ADC_ExternalTrigInjecConv_T1_TRGO           #x00000000)
(define ADC_ExternalTrigInjecConv_T1_CC4            #x00001000)
(define ADC_ExternalTrigInjecConv_None              #x00007000)

;;ADC-injectedSelection (uint8_t)
(define ADC_InjectedChannel_1                       #x14)
(define ADC_InjectedChannel_2                       #x18)
(define ADC_InjectedChannel_3                       #x1C)
(define ADC_InjectedChannel_4                       #x20)

;;ADC-analogWatchdog (uint32_t)
(define ADC_AnalogWatchdog_SingleRegEnable         #x00800200)
(define ADC_AnalogWatchdog_SingleInjecEnable       #x00400200)
(define ADC_AnalogWatchdog_SingleRegOrInjecEnable  #x00C00200)
(define ADC_AnalogWatchdog_AllRegEnable            #x00800000)
(define ADC_AnalogWatchdog_AllInjecEnable          #x00400000)
(define ADC_AnalogWatchdog_AllRegAllInjecEnable    #x00C00000)
(define ADC_AnalogWatchdog_None                    #x00000000)

;;ADC-interruptsDefinition
(define ADC_IT_EOC                                 #x0220)
(define ADC_IT_AWD                                 #x0140)
(define ADC_IT_JEOC                                #x0480)

;;ADC-flagsDefinition
(define ADC_FLAG_AWD                               #x01)
(define ADC_FLAG_EOC                               #x02)
(define ADC_FLAG_JEOC                              #x04)
(define ADC_FLAG_JSTRT                             #x08)
(define ADC_FLAG_STRT                              #x10)

;;ADC_configSingle, configure a single channel AD, nroChannels = 1
(define (ADC_configSingle scanMode contMode dma? channel sampleTime)
  (if (= dma? enable)
      (begin (ADC1_clock) (DMA1_clock) (#%DMA_config 1) )
      (ADC1_clock) )
  (#%ADC_config scanMode contMode dma? 1)
  (ADC_configChannel channel sampleTime 1)
  (cond ( (= contMode enable) (ADC_startConversion) ))
  (lambda ()
    (if (= dma? enable)
        (ADC_readValue-DMA contMode 0)
        (ADC_readValue contMode)) ) )

(define (ADC_single channel uart?)
  (let ( (scanMode   disable)
         (contMode   enable)
         (dma?       enable)
         (sampleTime ADC_SampleTime_55Cycles5) )
    (if uart?
        (begin
          (UART_AD channel 0) 
          (ADC_configSingle scanMode contMode dma? channel sampleTime)
          )
        (ADC_configSingle scanMode contMode dma? channel sampleTime) ) ))

(define (ADC_multi channels names uart?)
  (let ( (scanMode   enable)
         (contMode   enable)
         (dma?       enable)
         (sampleTime ADC_SampleTime_55Cycles5) )
    (let loop ( (chs channels) (sampleTimes '()) (posDMA 0) )
      (if (null? chs)
          (ADC_configMulti scanMode contMode channels sampleTimes names)
          (begin
            (if uart? (UART_AD (car chs) posDMA) #f)
            (loop (cdr chs) (cons sampleTime sampleTimes) (+ posDMA 1)) )  )
      ))
  )

;;ADC_configMulti, configure a multi channel AD
(define (ADC_configMulti scanMode contMode channels sampleTimes names)
  (let ( (nroChannels (length channels)) )
    (ADC1_clock)
    (#%ADC_config scanMode contMode enable nroChannels)

    (DMA1_clock)
    (#%DMA_config nroChannels)
    (let loop ( (channel-list    channels)
                (sampleTime-list sampleTimes)
                (pos 1) );;registro
      (cond ( (null? channel-list) '() )
            ( else
              (let ( (channel    (car channel-list))
                     (sampleTime (car sampleTime-list)) )
                (ADC_configChannel channel sampleTime pos) )
              (loop (cdr channel-list) (cdr sampleTime-list) (+ pos 1)) )) )
    (ADC_startConversion)
    (lambda ()
      (let loop ( (name-list names)
                  (values-ad '())
                  (pos 0) );;buffer
        (cond ( (null? name-list) values-ad )
              (else
               (loop (cdr name-list)
                     (cons (list (car name-list) (ADC_readValue-DMA contMode pos))
                           values-ad)
                     (+ pos 1) ) )) )) ) )


;;DMA
;;DMA-channels
(define DMA1_Channel1       0)
(define DMA1_Channel2       1)
(define DMA1_Channel3       2)
(define DMA1_Channel4       3)
(define DMA1_Channel5       4)
(define DMA1_Channel6       5)
(define DMA1_Channel7       6)
(define DMA2_Channel1       7)
(define DMA2_Channel2       8)
(define DMA2_Channel3       9)
(define DMA2_Channel4       10)
(define DMA2_Channel5       11)

;;TIM
(define TIM_2   2)
(define TIM_3   3)
(define TIM_4   4)
(define TIM_5   5)
;;Capture Prescaler Input
(define TIM_ICPSC_DIV1                     #x0000)
(define TIM_ICPSC_DIV2                     #x0004)
(define TIM_ICPSC_DIV4                     #x0008)
(define TIM_ICPSC_DIV8                     #x000C)
;;Counter Mode
(define TIM_CounterMode_Up                 #x0000)
(define TIM_CounterMode_Down               #x0010)
(define TIM_CounterMode_CenterAligned1     #x0020)
(define TIM_CounterMode_CenterAligned2     #x0040)
(define TIM_CounterMode_CenterAligned3     #x0060)

;;CHANNELS config
;;Channels
(define TIM_Channel_1                      #x0000)
(define TIM_Channel_2                      #x0004)
(define TIM_Channel_3                      #x0008)
(define TIM_Channel_4                      #x000C)
;;Operations modes
(define TIM_OCMode_Timing                  #x0000)
(define TIM_OCMode_Active                  #x0010)
(define TIM_OCMode_Inactive                #x0020)
(define TIM_OCMode_Toggle                  #x0030)
(define TIM_OCMode_PWM1                    #x0060)
(define TIM_OCMode_PWM2                    #x0070)
;;Polarity
(define TIM_OCPolarity_High                #x0000)
(define TIM_OCPolarity_Low                 #x0002)

;;TIM_config
(define (TIM_config TIMx prescaler period counterMode)
  (cond ( (eq? TIMx TIM_2) (TIM2_clock) )
        ( (eq? TIMx TIM_3) (TIM3_clock) )
        ( (eq? TIMx TIM_4) (TIM4_clock) )
        ( (eq? TIMx TIM_5) (TIM5_clock) ) )
  (#%TIM_config TIMx prescaler period counterMode) )
;;PWM_config
(define (PWM_config TIMx period channel OCMode OCPolarity)
  (#%PWM_config   TIMx channel OCMode OCPolarity)
  (#%PWM_set_duty TIMx channel 0 0)
  (lambda (duty-value duty-max)
    (#%PWM_set_duty TIMx channel (/ (* duty-value 100) duty-max) period) ))
;;PWM_simple = PWM_config with default configuration
(define (PWM_simple TIMx prescaler period channel)
  (TIM_config TIMx prescaler period TIM_CounterMode_Up)
  (let ( (OCMode TIM_OCMode_PWM1)
         (OCPolarity TIM_CounterMode_Up) )
    (cond ( (= channel 1)
            (PWM_config TIMx period TIM_Channel_1 OCMode OCPolarity) )
          ( (= channel 2)
            (PWM_config TIMx period TIM_Channel_2 OCMode OCPolarity) )
          ( (= channel 3)
            (PWM_config TIMx period TIM_Channel_3 OCMode OCPolarity) )
          ( (= channel 4)
            (PWM_config TIMx period TIM_Channel_4 OCMode OCPolarity) )
          ( (or (or (= channel TIM_channel_1) (= channel TIM_channel_2))
                (or (= channel TIM_channel_3) (= channel TIM_channel_4)) )
            (PWM_config TIMx period channel OCMode OCPolarity) )) ))

;;USART_config
(define master_add #x00)
(define my_add     #x01)

(define FRAME_FLAG #x7E)

(define f_IO      0)
(define f_ADC     1)
(define f_PWM     2)
(define f_DAC     3)
(define f_config 10)

(define  p_IN     0)
(define  p_OUT    1)

(define o_READ    0)
(define o_WRITE   1)

(define (UART_GPIO operation gpiox pinx in_out)
  (let ( (source        my_add)
         (destination   master_add)
         (config        f_config)
         (periph_config f_IO) )
    (#%UART_putByte source)
    (#%UART_putByte destination)
    (#%UART_putByte config)
    (cond ( (or (equal? operation 'read)
                (equal? operation "read"))
            (#%UART_putByte o_READ) )
          ( (or (equal? operation 'write)
                (equal? operation "write"))
            (#%UART_putByte o_WRITE) )  )
    (#%UART_putByte periph_config)
    (#%UART_putByte gpiox)
    (let ( (pinH
            (if (> pinx Pin_7)
                (bitwise-and (arithmetic-shift-right pinx 8) #xFF)
                #x00)) )
      (#%UART_putByte pinH) )
    (#%UART_putByte (bitwise-and pinx #xFF)) ;;pinL
    (#%UART_putByte in_out)
    (#%UART_putByte FRAME_FLAG) ))

(define (UART_AD channel posDMA)
  (let ( (source        my_add)
         (destination   master_add)
         (config        f_config)
         (periph_config f_ADC) )
    (#%UART_putByte source)
    (#%UART_putByte destination)
    (#%UART_putByte config)
    (#%UART_putByte periph_config)
    (#%UART_putByte channel)
    (#%UART_putByte posDMA)
    (#%UART_putByte FRAME_FLAG) ))

(define (UART_PWM timx channel operation)
  (let ( (source        my_add)
         (destination   master_add)
         (config        f_config)
         (periph_config f_PWM) )
    (#%UART_putByte source)
    (#%UART_putByte destination)
    (#%UART_putByte config)
    (cond ( (or (equal? operation 'read)
                (equal? operation "read"))
            (#%UART_putByte o_READ) )
          ( (or (equal? operation 'write)
                (equal? operation "write"))
            (#%UART_putByte o_WRITE) )  )
    (#%UART_putByte periph_config)
    (#%UART_putByte timx)
    (#%UART_putByte channel)
    (#%UART_putByte FRAME_FLAG) ))


;;DAC
;;DAC-trigger
(define DAC_Trigger_None                   #x00000000) 
(define DAC_Trigger_T6_TRGO                #x00000004) 
(define DAC_Trigger_T8_TRGO                #x0000000C)                                                        
(define DAC_Trigger_T3_TRGO                #x0000000C)                                                        
(define DAC_Trigger_T7_TRGO                #x00000014) 
(define DAC_Trigger_T5_TRGO                #x0000001C) 
(define DAC_Trigger_T15_TRGO               #x0000001C) 
(define DAC_Trigger_T2_TRGO                #x00000024) 
(define DAC_Trigger_T4_TRGO                #x0000002C) 
(define DAC_Trigger_Ext_IT9                #x00000034) 
(define DAC_Trigger_Software               #x0000003C) 

;;DAC-WaveGeneration
(define DAC_WaveGeneration_None            #x00000000)
(define DAC_WaveGeneration_Noise           #x00000040)
(define DAC_WaveGeneration_Triangle        #x00000080)

;;DAC-OutputBuffer
(define DAC_OutputBuffer_Enable            #x00000000)
(define DAC_OutputBuffer_Disable           #x00000002)

;;DAC-Channel
(define DAC_Channel_1                      #x00000000)
(define DAC_Channel_2                      #x00000010)

(define (DAC_config trigger waveGeneration outputBuffer channel)
  (DAC_clock)
  (#%DAC_config trigger waveGeneration outputBuffer channel) )

(define (DAC_single channel)
  (let ( (trigger        DAC_Trigger_None)
         (waveGeneration DAC_WaveGeneration_None)
         (outputBuffer   DAC_OutputBuffer_Enable) )
  (DAC_config trigger waveGeneration outputBuffer channel)
  (lambda (value)
    (DAC_writeValue channel value)) ))
